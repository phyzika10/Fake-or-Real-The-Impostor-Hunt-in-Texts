{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d56d1a71",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-07-22T08:21:29.731546Z",
     "iopub.status.busy": "2025-07-22T08:21:29.731156Z",
     "iopub.status.idle": "2025-07-22T08:21:31.996883Z",
     "shell.execute_reply": "2025-07-22T08:21:31.995864Z"
    },
    "papermill": {
     "duration": 2.27071,
     "end_time": "2025-07-22T08:21:31.998614",
     "exception": false,
     "start_time": "2025-07-22T08:21:29.727904",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>real_text_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id  real_text_id\n",
       "0   0             1\n",
       "1   1             2\n",
       "2   2             1\n",
       "3   3             2\n",
       "4   4             2"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from pathlib import Path\n",
    "\n",
    "base_path = Path(\"/kaggle/input/fake-or-real-the-impostor-hunt/data\")\n",
    "\n",
    "train_df = pd.read_csv(\"/kaggle/input/fake-or-real-the-impostor-hunt/data/train.csv\")\n",
    "train_df.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "23b9d514",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-22T08:21:32.004554Z",
     "iopub.status.busy": "2025-07-22T08:21:32.004228Z",
     "iopub.status.idle": "2025-07-22T08:21:32.067216Z",
     "shell.execute_reply": "2025-07-22T08:21:32.065983Z"
    },
    "papermill": {
     "duration": 0.06799,
     "end_time": "2025-07-22T08:21:32.069032",
     "exception": false,
     "start_time": "2025-07-22T08:21:32.001042",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "df1 shape: (1068, 2)\n",
      "df1 columns: Index(['id', 'real_text_id'], dtype='object')\n",
      "df2 shape: (1068, 2)\n",
      "df2 columns: Index(['id', 'real_text_id'], dtype='object')\n",
      "df3 shape: (1068, 2)\n",
      "df3 columns: Index(['id', 'real_text_id'], dtype='object')\n",
      "df4 shape: (1068, 2)\n",
      "df4 columns: Index(['id', 'real_text_id'], dtype='object')\n",
      "df5 shape: (1068, 2)\n",
      "df5 columns: Index(['id', 'real_text_id'], dtype='object')\n",
      "   id  real_text_id\n",
      "0   0             2\n",
      "1   1             2\n",
      "2   2             1\n",
      "3   3             1\n",
      "4   4             2\n",
      "✅ submission.csv saved with 1068 rows.\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "df1 = pd.read_csv(\"/kaggle/input/submission/submission Combinig feature.csv\")\n",
    "df2 = pd.read_csv(\"/kaggle/input/submission/submission Enssenbel.csv\")\n",
    "df3 = pd.read_csv(\"/kaggle/input/submission/submission Random Forest.csv\")\n",
    "df4 = pd.read_csv(\"/kaggle/input/submission/submission memory Optimized.csv\")\n",
    "df5 = pd.read_csv(\"/kaggle/input/submission/submission_challenger_deberta_only Memory Optimized.csv\")\n",
    "\n",
    "dfs = [df1, df2, df3, df4, df5]\n",
    "\n",
    "for i, df in enumerate(dfs):\n",
    "    print(f\"df{i+1} shape: {df.shape}\")\n",
    "    print(f\"df{i+1} columns: {df.columns}\")\n",
    "    if 'real_text_id' not in df.columns:\n",
    "        raise ValueError(f\"⚠️ Missing 'real_text_id' in df{i+1}\")\n",
    "    df['real_text_id'] = df['real_text_id'].astype(int)  # تأكيد أنها أعداد صحيحة\n",
    "    df.sort_values('id', inplace=True)\n",
    "    df.reset_index(drop=True, inplace=True)\n",
    "\n",
    "\n",
    "weights = [0.35, 0.35, 0.1, 0.1, 0.1]\n",
    "\n",
    "\n",
    "score_1 = np.zeros(len(dfs[0]))\n",
    "score_2 = np.zeros(len(dfs[0]))\n",
    "\n",
    "for df, w in zip(dfs, weights):\n",
    "    score_1 += (df['real_text_id'] == 1) * w\n",
    "    score_2 += (df['real_text_id'] == 2) * w\n",
    "\n",
    "final_pred = np.where(score_1 >= score_2, 1, 2).astype(int)\n",
    "\n",
    "submission = pd.DataFrame({'id': dfs[0]['id'], 'real_text_id': final_pred})\n",
    "print(submission.head())\n",
    "submission.to_csv(\"submission.csv\", index=False)\n",
    "print(\"✅ submission.csv saved with\", len(submission), \"rows.\")\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 12964783,
     "sourceId": 105874,
     "sourceType": "competition"
    },
    {
     "datasetId": 7918015,
     "sourceId": 12541816,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31089,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 8.090939,
   "end_time": "2025-07-22T08:21:32.693764",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-22T08:21:24.602825",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
